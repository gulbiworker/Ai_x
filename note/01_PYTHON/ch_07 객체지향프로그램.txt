1. 절 객체와 클래스 함수
        class 클래스명 : 변수나 함수들 선언

2 절. 생성자와 소멸자
        생성자는 inti(self, 매개변수,...) - 객체가 생성될 때 자동 실행 : 쓰는 이유는 객체 생성시 필요한 인스턴스 변수 초기화 포함
        소멸자는 del(self) - 객체가 소멸될때 자동 실행 : 인스턴스 객체의 레퍼런스 카운트가 0이 될 때 실행

3절. 변수와 메소드
       인스턴스 메소드(self), 클래스메소드(clz or cls), stastic 메소드 ()
       인스턴스 메소드 : 첫번째 인자에 self를 꼭 명시. 객체를 통해서만 호출할 수 있는 메소드
       클래스 메소드 : 메소드위에 @classmethod를 선언한 메소드. 첫번째 인자에 cls(clz) 꼭 명시
       static 메소드 : 메소드위에 @staticmethod를 선안한 메소드. 인자를 넣지 않음


 요약
** 객체를 이용하면 객체에 정보를 저장하고, 그 정보를 이용해서 어떤 기능을 수행할 수 있다.**

객체 = 데이터(변수: 객체마다 고유의 값) + 기능(메소드, 함수)**
** 그 객체를 만들이 위한 틀 => 클래스 **

``` class 클래스 명 : 독스트링 클래스변수명 = 값 def init(self, [갹체멤버를 초기화 할 변수 = 값, ...]): self.인스턴스(일반)변수 = 값 객체를 생성할 때 객체 멤버변수의 초기화 def method(self): 인스턴스 메소드(일반함수의) 매개변수는 self를 반드시 포함 @ classmethod def classmethod(cls): 코드 @ staticmethod def staticmethod(): 코드

        객체변수 = 클래스명()
        객체변수.method()
        클래스명.classmethod()
        클래스명.staricmethod()


4절. 상속과 재정의
     클래스를 재사용
     상속을 이용하면 부모 클래스의 모든 속성을 자식 클래스로 물려줄 수 있음 
      문법 : class 자식클래스명(부모클래스명):